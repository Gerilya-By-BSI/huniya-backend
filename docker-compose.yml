version: '3.8'

services:
  db:
    image: postgres:latest
    container_name: db
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-huniya}
    networks:
      - huniya
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-huniya}"]
      interval: 5s
      timeout: 5s
      retries: 5
      
  ml-api:
    image: rihlan24/huniya-ml-api:latest
    container_name: ml-api
    restart: unless-stopped
    ports:
      - "5000:5000"
    env_file:
      - ./fastapi-ml/.env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-huniya}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - huniya
      
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api
    restart: unless-stopped
    ports:
      - "4000:4000"
    env_file:
      - .env
    environment:
      # - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-huniya}?schema=public
      - FASTAPI_URL=http://ml-api:5000
    depends_on:
      db:
        condition: service_healthy
      ml-api:
        condition: service_started
    volumes:
      - ./storage:/app/storage
    networks:
      - huniya

networks:
  huniya:
    driver: bridge

volumes:
  pgdata: